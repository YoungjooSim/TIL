Git, Github, Sourcetree 강의 시청

금일 작업 내용
1. github, sourcetree 회원가입 및 설치
- 추 후 설정 방법 모르겠으면 강의 자료 보면서 설치 할것!
2. kimchi-recpie push, pull, clone 실습
3. gitgit에서 코드 수정 및 타인 코드 보는법 

공부 내용
1. git : 프로젝트 버전 관리 도구
- 회사에서 과제를 할 때, 복사 파일(백업용)을 만들었어는데, git을 사용하면 복사 파일을 안만들어도 된다!
2. git history : commit 한 순서대로 리스트 저장
- 기업 사이트 연혁표 처럼 만들어서 보여준다. 한참 이전에 commit한 파일들을 확인하기에 좋타!
3. github는 git으로 된 프로젝트 저장 공간을 제공하고, 협업하기 위한 기능들을 가지고 있음, 커뮤니티 기능도 있음
(local, romote repo가 나누어져 있는 이유)
4. sourctree : 전 세계에서 가장 많이 사용되는 git 도구 중 하나, sourctree를 이용하여 github에 push, pull 가능
5. commit : 현재 프로젝트 찰칵(스냅샷) 저장(comment 항상 작성!!)
- 누나, 언제, 파일 내용 세가지 내용을 포함한 작업내용을 저장해줌!(commit id를 통하여 구분)
6. sourcetree에서 git 파일로 만들어 주기(git initialize, init)
- .git 파일이 안보일 경우 -> 작업 표시줄 -> 파일 탐색기 -> 보기 -> 표시 -> 숨겨진 항목 선택
7. sourcetree 로컬 저장소 파일 삭제 시, 북마크 제거(sourcetree 내 삭제), 삭제(휴지통~)
- git 설정을 처음으로 돌리고 싶다.(.git 폴더를 삭제해라)
8. github, sourcetree 코드 비교, 기존 코드(빨간색), 변경 코드(녹색)
9. add, staging : commit 하기 위한 파일만 선택하는 것
- add,  staging 을 사용하면 여러파일을 수정했어도 한개의 파일만 commit 할 수 있다.
10. push : 데이터 변경 변용만 이동 - local repo(sourcetree) -> remote repo(githeb)
11. pull : 데이터 변경 변용만 이동 - remote repo(githeb) -> local repo(sourcetree)
12. clone : 데이터 다운로드 - remote repo(githeb) -> my pc

강의 추가 키워드
-version : 프로젝트 상태가 변경되는 정보를 알고 있다는 것입니다. git은 가장널이 쓰이는 버전도구 중에 하나로
commit을 사용해서 버전이 달라지는 것을 관리합니다.
-tracking : 로컬 repo 와 원격 repo를 연결한다. 추후 강의를 통하여 배움

